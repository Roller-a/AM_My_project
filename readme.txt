

=====================================

git remote add origin https://github.com/menqwTV/AM_My_project.git

git push --force <remote_repository> 

As the error message says: git pull before you try to git push. Apparently your local branch is out of sync with your tracking branch.

Depending on project rules and your workflow you might also want to use git pull --rebase


Git и Github. Простые рецепты
Git,
Get started by creating a new file or uploading an existing file. We recommend every repository include a README, LICENSE, and .gitignore.

\AM_My_project
…or create a new repository on the command line
echo "# q" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/urqsxwwtwoffszo/q.git
git push -u origin master
                
…or push an existing repository from the command line
git remote add origin https://github.com/urqsxwwtwoffszo/q.git
git push -u origin master
…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.

GitHub
Из песочницы
При разработке собственного проекта, рано или поздно, приходится задуматься о том, где хранить исходный код и как поддерживать работу с несколькими версиями. В случае работы на компанию, обычно это решается за вас и необходимо только поддерживать принятые правила. Есть несколько общеупотребимых систем контроля версий, и мы рассмотрим одну из самых популярных — это Git и сервис Github.

Система Git появилась, как средство управления исходными текстами в операционной системе Linux и завоевала множество поклонников в среде Open Source.

Сервис Github предоставляет хостинг (хранение) исходных текстов как на платной, так и на бесплатной основе. Это одна из крупнейших систем, которую любят Open Source пользователи. Основное отличие платной версии — это возможность создания частных репозиториев (хранилищ) исходных текстов и если вам скрывать нечего, то можете спокойно пользоваться бесплатной версией.

После того, как вы начали работу над проектом и написали какой-то работающий прототип, у вас появится желание сохранить результаты работы. Это так же может быть полезно в случае, если вы захотите продолжить работу на другом компьютере. Самое простое решение — это сохранить все на флешке. Этот вариант неплохо работает, но если есть подключение к интернету (а сейчас у кого его нет), то удобно воспользоваться системами Git/Github.

В этой статье будут описаны базовые сценарии использования систем Git/Github при работе над проектом в среде Linux с помощью командной строки. Все примеры проверялись на системе с Linux Ubuntu 14.04 и Git 1.9.1. Если вы пользуетесь другим дистрибутивом, то возможны отличия.

Создание локального репозитория

Предположим, что ваш проект находится в папке /home/user/project. Перед тем, как сохранять исходники, можно посмотреть, нет ли временных файлов в папке с проектом и по возможности их удалить.

Для просмотра папки удобно воспользоваться командой tree, которая покажет не только содержимое каждой папки, но и древовидную структуру директорий.

Часто временные файлы содержат специфические суффиксы, по которым их легко обнаружить и в последствии удалить. Для поиска таких файлов можно воспользоваться командой find. В качестве примера посмотрим, как найти все файлы, которые генерируются компилятором Python и имеют расширение .pyc

Переходим в папку с проектом /home/user/project:

cd /home/user/project

И показываем список файлов с расширением .pyc:

find . -name *.pyc

Эта команда выведет список всех файлов с расширением .pyc в текущей директории и в ее поддиректориях. Для удаления найденных файлов, достаточно добавить ключ -delete к этой команде:

find . -name *.pyc -delete

Очень рекомендуется не спешить и сразу ключ этот не добавлять. Первый раз вызвать команду для просмотра файлов и только убедившись, что в список не попало ничего полезного добавить ключ удаления.

Создадим локальный репозиторий в папке с проектом:

git init

После выполнения этой команды появится новая папка с именем .git. В ней будет несколько файлов и поддиректориев. На данный момент система управления версиями еще не видит наших файлов.

Добавление файлов в локальный репозиторий

Для добавления файлов используется команда:

git add readme

После выполнения команды, файл readme будет добавлен в систему управления версий (конечно если он уже был то этого в проекте). При добавлении файла генерируется хеш значение, которое выглядит примерно так:

9f2422325cef705b7682418d05a538d891bad5c8

Добавленные файлы хранятся в папке .git/objects/xx/yyyyyyyy, при этом первые 2 цифры хеша ипользуются для указания директории, а остальное хеш значение является именем файла. Наш добавленный файл будет находится здесь:

.git/objects/9f/2422325cef705b7682418d05a538d891bad5c8

Что легко увидеть с помощью команды:

ls .git/objects

Сам файл является архивом, который легко распаковать и вывести на экран, указав полное значение хеша.

git cat-file -p 9f2422325cef705b7682418d05a538d891bad5c8

Для того, чтобы добавить все файлы из текущей директории введите:

git add .

Если нужно добавить файлы из текущей директории и из всех поддиректориев, то используйте:

git add --all

Для того, чтобы в систему не попадали временные файлы, можно их занести в файл .gitignore, который нужно создать самостоятельно и разместить в корневом каталоге проекта (на том же уровне, что и .git директория).

Например, если в в файл .gitignore добавить следующую строчку *.pyc, то все файлы с расширением .pyc не будут добавляться в репозиторий.

После добавления файлов, все изменения находятся в так называемой staging (или cached) area. Это некоторое временнное хранилище, которое используется для накопления изменений и из которого создаются собственно версии проектов (commit).

Для просмотра текущего состояния можно воспользоваться командой:

git status

После выполнения команды мы увидим, что в stage area находится наш файл:

new file:   readme

Если вы продолжите вносить изменения в файл readme, то после вызова команды git status вы увидите две версии файла.

new file:   readme

modified:   readme

Чтобы добавить новые изменения достаточно повторить команду. Команда git add не только добавляет новые файлы, но и все изменения файлов, которые были добавлены ранее.

git add readme

Можно отменить добавления файла readme в staging area с помощью команды:

git rm --cached readme

После выполнения команды, файл readme отметится, как неизмененный системой.

Создание версии проекта

После того, как мы добавили нужные файлы в staging area мы можем создать версию проекта. С помощью команды:

git commit -m "comment"

Каждая новая версия сопровождается комментарием.

После коммита, мы сможем найти два новых объекта внутри .git репозитория.

.git/objects/9f/2422325cef705b7682418d05a538d891bad5c8
.git/objects/65/7ab4c07bd3914c7d66e4cb48fe57f5c3aa7026
.git/objects/da/c6721c3b75fcb3c9d87b18ba4cef2e15e0a3d3

Посмотрим, что внутри:

git cat-file -t 657ab4c07bd3914c7d66e4cb48fe57f5c3aa7026

Ключ -t показывает тип объекта. В результате мы видим:

commit

Для второго объекта:

git cat-file -t dac6721c3b75fcb3c9d87b18ba4cef2e15e0a3d3

Результат:

tree

Для самого первого файла:

git cat-file -t 9f2422325cef705b7682418d05a538d891bad5c8

Мы видим:

blob

Если мы будем дальше изучать содержимое этих файлов, то обнаружим древовидную структуру. От каждого коммита можно по ссылкам пройти по всем измененным файлам. Для практического применения это не очень нужно, но возможно так будет легче понять, что происходит при работе с системой Git.

Самую первую версию отменить нельзя. Ее можно только исправить. Если вы хотите добавить изменения в последнюю версию, то после выполнения команды commit, добавляете необходимые изменения и вызываете:

git commit -m "comment" --amend

Или так:

git commit --amend --no-edit

Ключ --no-edit нужен, чтобы не вводить заново комментарий.

Можно просмотреть изменения, которые вы внесли последним коммитом:

git show

Или так:

git show --name-only

Ключ --name-only нужен, чтобы показывать только имена измененный файлов. Без него по каждому измененнному файлу будет выдан список всех изменений.

Если вы продолжили работать и изменили только те файлы, которые были уже добавлены в систему командой git add, вы можете сделать коммит одной командой:

git commit -a -m "comment"

Для просмотра списка всех коммитов, воспользуйтесь командой:

git log

Или так:

git log --oneline

Ключ --oneline нужен, чтобы уменьшить количество информации выдаваемой на экран. С этим ключем каждый коммит показывается в одну строчку. Например:

2b82e80 update
657ab4c first

Для того, чтобы просмотреть изменения по конкретному коммиту, достаточно в команду git show добавить хеш значение коммита, которое можно получить с помощью предыдущей команды.

git show 657ab4c 

Для отмены последнего коммита (кроме самого первого) можно воспользоваться следующей командой:

git reset HEAD~1

Для того чтобы удалить все файлы в папке, которые не относятся к проекту и не сохранены в репозитории, можно воспользоваться командой:

git clean -df

Создание репозитория на Github

До текущего момента мы работали с локальным репозиторием, который сохранялся в папке на компьютере. Если мы хотим иметь возможность сохранения проекта в интернете, создадим репозиторий на Github. Для начала нужно зарегистрироваться на сайте github.com под именем myuser (в вашем случае это может быть любое другое имя).

После регистрации нажимаем кнопочку "+" и вводим название репозитория. Выбираем тип Public (репозиторий всегда Public для бесплатной версии) и нажимаем Create.

В результате мы создали репозиторий на сайте Github. На экране мы увидим инструкцию, как соединить наш локальный репозиторий со вновь созданным. Часть команд нам уже знакома.

Добавляем удаленный репозиторий (по протоколу SSH) под именем origin (вместо origin можно использовать любое другое имя).

git remote add origin git@github.com:myuser/project.git

Можем просмотреть результат добавления с помощью команды:

git remote -v

Если все было правильно сделано, то увидим:

origin git@github.com:myuser/project.git (fetch)
origin git@github.com:myuser/project.git (push)

Для того, чтобы отменить регистрацию удаленного репозитария введите:

git remote rm origin

Это может понадобиться, если вы захотите поменять SSH доступ на HTTPS. После этого можно добавить его опять, например под именем github и протоколом HTTPS.

git remote add github https://github.com/myuser/project.git

Следующей командой вы занесете все изменения, которые были сделаны в локальном репозитории на Github.

git push -u github master

Ключ -u используется для того, чтобы установить связь между удаленным репозиторием github и вашей веткой master. Все дальнейшие изменения вы можете переносить на удаленный репозиторий упрощенной командой.

git push

Перенос репозитория на другой компьютер

После того, как репозиторий был создан на Github, его можно скопировать на любой другой компьютер. Для этого применяется команда:

git clone https://github.com/myuser/project.git

Результатом выполнения этой команды будет создание папки project в текущем каталоге. Эта папка также будет содержать локальный репозиторий (то есть папку .git).

Так же можно добавить название папки, в которой вы хотите разместить локальный репозиторий.

git clone https://github.com/myuser/project.git <myfolder>

Работа с одним репозиторием с разных компьютеров

С одним репозиторием с разных компьютеров может работать несколько разработчиков или вы сами, если например работаете над одним и тем же проектом дома и на работе.

Для получения обновлений с удаленного репозитория воспользуйтесь командой:

git pull

Если вы изменили ваши локальные файлы, то команда git pull выдаст ошибку. Если вы уверены, что хотите перезаписать локальные файлы, файлами из удаленного репозитория то выполните команды:

git fetch --all
git reset --hard github/master

Вместо github подставьте название вашего удаленного репозитория, которое вы зарегистрировали командой git push -u.

Как мы уже знаем, для того чтобы изменения выложить на удаленный репозиторий используется команда:

git push

В случае, если в удаленном репозитории лежат файлы с версией более новой, чем у вас в локальном, то команда git push выдаст ошибку. Если вы уверены, что хотите перезаписать файлы в удаленном репозитории несмотря на конфликт версий, то воспользуйтесь командой:

git push -f

Иногда возникает необходимость отложить ваши текущие изменения и поработать над файлами, которые находятся в удаленном репозитории. Для этого отложите текущие изменения командой:

git stash

После выполнения этой команды ваша локальная директория будет содержать файлы такие же, как и при последнем коммите. Вы можете загрузить новые файлы из удаленного репозитория командой git pull и после этого вернуть ваши изменения которые вы отложили командой:

git stash pop

Заключение

Мы рассмотрели базовые сценарии работы с системами Git и Github. Каждая приведенная выше команда имеет значительно больше ключей и соответственно возможностей. Постепенное их изучение даст вам возможность легко оберегать свои иходники и больше концентрироваться непосредственно на разработке.
Теги:
git
github
Хабы:
Git
GitHub

Реклама
ЧИТАЮТ СЕЙЧАС
Пользователю все это не нужно! Хватит пропагандировать Линукс
24,3k
398
Что будет с вашей кожей от постоянного ношения перчаток
10,3k
73
Как не дать бухгалтеру себя кинуть или Переводим 1С в облако. Пошаговая инструкция
6,6k
14
10 расширений для VS Code, без которых я не могу программировать
6,6k
23
Нейросеть научили создавать несуществующие слова и давать им определения
3k
1
Артикли в английском: безжалостная война правил и исключений
7,3k
34
Как защитить инфраструктуру IT-компании на удаленке Мегапост
Редакторский дайджест
Присылаем лучшие статьи раз в месяц

Электропочта

–13
210k
15
Поделиться

sunduchkov
Программист
Skype
ПОХОЖИЕ ПУБЛИКАЦИИ
19 ноября 2012 в 17:58 Git & Github глазами очевидца
+11
18k
76
10
10 августа 2011 в 13:43 Pull request'ы на GitHub или Как мне внести изменения в чужой проект
+76
300k
675
30
8 августа 2011 в 12:20 Как начать работать с GitHub: быстрый старт
+148
1055k
2179
50
КУРСЫ
Система управления версиями Git
7 июня 2020
 1 неделя
 11 990 
 Специалист.ру
Программист iOS
18 мая 2020
 6 месяцев
 72 000 
 GeekBrains
Программист Android
18 мая 2020
 7 месяцев
 84 000 
 GeekBrains
Профессия веб-разработчик
18 мая 2020
 13 месяцев
 109 900 
 Нетология
SQL и получение данных
18 мая 2020
 5 недель
 23 900 
 Нетология
Больше курсов на Хабр Карьере

Реклама
Комментарии 15

saboteur_kiev
23 декабря 2015 в 20:06

+16
Еще одна статья про «git init»?

develop7
23 декабря 2015 в 22:10

+6
всем известно, что чем больше таких статей, тем легче гитом пользоваться!

igumnov
24 декабря 2015 в 08:56

0
Совсем упущена тема по работе с бранчами. Получается что статья для тех кто в одного с гитом работает :)

develop7
23 декабря 2015 в 20:29

+3
Добавленные файлы хранятся в папке .git/objects/xx/yyyyyyyy, при этом первые 2 цифры хеша ипользуются для указания директории, а остальное хеш значение является именем файла
зачем неофиту это знать?

novoxudonoser
23 декабря 2015 в 21:54

–10
ну про git init уже выше сказали

>После выполнения этой команды появится новая папка\

Кхм. Папка это у девушки лёгкого поведения а в *nix это каталог или директория

saboteur_kiev
24 декабря 2015 в 01:49

+4
В оригинале все же папка(folder) для Windows GUI и директория(directory) для *nix, DOS и windows command line.
Каталог — аналог директории, а не папки.

ivlis
24 декабря 2015 в 06:14

+1
Рассказывать основы git и не знать про .gitignore…

Borz
24 декабря 2015 в 08:20

+1
в статье целых два абзаца посвящены .gitignore…
Alexey2005
24 декабря 2015 в 22:03

–2
Проблема Git'а заключается в его высокой чувствительности к ошибкам. Т.е. ошибиться в процессе работы с ним очень легко, а исправить потом ошибку гораздо труднее. Особенно если не сразу понял, что начались косяки, и накатил несколько коммитов сверху.
Сколько раз я, закоммитив изменения с домашнего компа, открывал ноут и внезапно обнаруживал, что коммит на сервер не попал, т.к. по умолчанию пушится не весь реп, а лишь часть его веток, о чём я конечно же в очередной раз забыл…
Или, закоммитив из-под Windows, потом удивлялся — почему diff пишет, что в коммите изменена абсолютно каждая строчка проекта? А всему виной различие в символах перевода строки Windows и Linux.
Наконец, я столько раз запарывал реп или вносил в него разные трудноустранимые косяки, что у меня давно выработался рефлекс — периодически делать бэкапы репозитория и рабочей директории, чтоб, если что-то пойдёт не так, просто накатить версию репа из бэкапа и закоммитить последний вариант воркдира…

SnowLion
25 декабря 2015 в 23:07

+1
Просто оставлю это здесь

Ar20L80
4 мая 2019 в 05:07

0
Спасибо за публикацию.
У меня получилось по вашей статье. Но только до этого момента:
$ git push -u origin master
ssh: connect to host github.com port 22: Operation not permitted
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

Напишите побольше о правах доступа. Почему может возникнуть такая ошибка.
И даже по https — тоже та же ошибка. Порт не заблокирован.

develop7
4 мая 2019 в 21:33

+1
что говорит ssh git@github.com?


Borz
4 мая 2019 в 22:20

0
лучше с "-v" — информации больше будет...


ssh -v git@github.com


И проверьте настройки проекта — возможно неправильно url указан: https://stackoverflow.com/a/55929611/1477909


saboteur_kiev
4 мая 2019 в 21:52

0
А у вас есть доступ к указанному репозиторию?

Ar20L80
4 мая 2019 в 22:34

0
$ssh git@github.com
ssh: connect to host github.com port 22: Operation not permitted

Доступ есть. Есть репозитории. Но я их отправляю по https://, хотя и по ssh: тоже иногда получается.
Ссылку в основном делаю так: $git remote add имя_ссылки https://github.com/имя_пользователя/имя_репозитория.git
Вместо origin использую удобное имя.
PS. Иногда всё нормально. Иногда «permission denied».
Статья хорошая.
Но в статье можно было-бы рассказать еще про токены, какие токены генерируются. Для чего.
Про роли в проекте. Нет я конечно понимаю, что тогда получится очень длинно.
И вы упомянули ссылки на хеш. Продолжите, как их можно использовать. Что можно использовать для ссылки первые 3 буквы хеша. И еще
версии проектов (commit)
— это не совсем точное определение. commit — это что-то вроде ссылки на сделанные изменения. То есть это ссылка на разницу. Точного определения я сам сейчас не вспомню. Нужно будет поискать.
Расскажите что такое HEAD. И о git checkout HEAD^, о ветках, о слиянии веток



=========================

Ситуация когда у вас уже есть клон репозитория с которым вы работаете, делаете pull и смотрите что там какая то фигня накоммитчена от разработчиков.

Выбираем нужный бранч(ветку), у меня она master
git checkout master

делаем откат изменений в репозитории для примера на два коммита назад
git reset --hard HEAD~2

Можно сделать до какого то определенного коммита по хешу
git reset --hard HEAD hash
Хеш можно взять в вебинтерфейсе гитхаба.

Далее делаем принудительный коммит в основной репо на гитхабе
git push -f origin master
без -f будет ругаться что у вас версия младше чем в гитхабе и вам надо сделать pull

=====================

@menqwTV has invited you to collaborate on the
menqwTV/AM_My_project repository
You can accept or decline this invitation. You can also head over to https://github.com/menqwTV/AM_My_project to check out the repository or visit @menqwTV to learn a bit more about them.

This invitation will expire in 7 days.